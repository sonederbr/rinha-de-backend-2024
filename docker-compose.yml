version: '3.8'
services:
  api01: &api
    image: sonederbr/rinha-api
    build: ./
    hostname: api01
    environment:
      - ASPNETCORE_URLS=http://+:8080;http://+:8081
      - ASPNETCORE_ENVIRONMENT=Production
    expose:
      - "8080"
    ports:
      - "8081:8080"
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "130MB"
  api02:
    <<: *api
    hostname: api02
    ports:
      - "8082:8080"
  nginx:
    image: nginx:stable
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "20MB"
  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_USER=rinha
      - POSTGRES_PASSWORD=backend
      - POSTGRES_DB=RinhaBackend2024Q1
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      resources:
        limits:
          cpus: "0.95"
          memory: "270MB"

networks:
  default:
    driver: bridge
    name: rinhav2
  
  
  
#  db:
#    image: postgres:16.1
#    hostname: db
#    environment:
#      - POSTGRES_USER=rinha
#      - POSTGRES_PASSWORD=backend
#      - POSTGRES_DB=RinhaBackend2024Q1
#    ports:
#      - "5432:5432"
#    volumes:
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#    command: 'postgres -c max_connections=1000 -c shared_buffers=128MB -c synchronous_commit=off -c fsync=off -c full_page_writes=off'
#    #command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096
#    deploy:
#      resources:
#        limits:
#          # Note que a soma de todos os limites dos serviços
#          # aqui declarados é de 1.5 unidades de CPU e 550MB
#          # de memória. A distribuição feita aqui é apenas
#          # um exemplo – distribua como quiser.
#          cpus: "0.8"
#          # memory: "340MB"
          
    #  db:
    #    image: postgres:16.1
    #    restart: always
    #    environment:
    #      - POSTGRES_USER=postgres
    #      - POSTGRES_PASSWORD=postgres
    #    ports:
    #      - '5432:5432'
    #    volumes:
    #      - db:/var/lib/postgresql/data
    #volumes:
    #  db:
    #    driver: local
    
    #https://geshan.com.np/blog/2021/12/docker-postgres/